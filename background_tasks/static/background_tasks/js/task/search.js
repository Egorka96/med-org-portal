// Generated by CoffeeScript 1.11.1
(function() {
  var prepareCancel, prepareRestart, renderTask;

  prepareCancel = function() {
    return $('button[name=cancel]').click(function() {
      var taskId;
      taskId = $(this).val();
      return $.ajax({
        url: "/background_tasks/rest/task/" + taskId + "/cancel/",
        method: 'put',
        success: function() {
          return $.toast({
            heading: '',
            text: 'Задача отменена',
            icon: 'info',
            showHideTransition: 'fade',
            stack: 1,
            position: 'top-right'
          });
        }
      }).fail(function() {
        return $.toast({
          heading: '',
          text: 'Ошибка отмены задачи',
          icon: 'error',
          showHideTransition: 'fade',
          stack: 1,
          position: 'top-right'
        });
      });
    });
  };

  prepareRestart = function() {
    return $('button[name=restart]').click(function() {
      var taskId;
      taskId = $(this).val();
      return $.ajax({
        url: "/background_tasks/rest/task/" + taskId + "/restart/",
        method: 'put',
        success: function() {
          return $.toast({
            heading: '',
            text: 'Задача перезапущена',
            icon: 'info',
            showHideTransition: 'fade',
            stack: 1,
            position: 'top-right'
          });
        }
      }).fail(function() {
        return $.toast({
          heading: '',
          text: 'Ошибка перезапуска задачи',
          icon: 'error',
          showHideTransition: 'fade',
          stack: 1,
          position: 'top-right'
        });
      });
    });
  };

  renderTask = function(task) {
    var progress, tr;
    tr = $("#task_" + task.id);
    tr.removeClass('success').removeClass('danger');
    if (task.is_success) {
      tr.addClass('success');
    }
    if (task.is_fail) {
      tr.addClass('danger');
    }
    progress = tr.find('.progress');
    if (!task.start_dt || task.finish_dt) {
      progress.hide();
      tr.find('.task-status').text(task.status).show();
    } else {
      tr.find('.task-status').text(task.status).hide();
      progress.show();
      progress.find('.progress-bar').attr('aria-valuenow', task.percent).css('width', task.percent + "%").text(task.percent + "%");
    }
    tr.find('.start-dt').text(task.start_dt_rus);
    tr.find('.finish-dt').text(task.finish_dt_rus);
    tr.find('button[name=cancel]').prop('disabled', task.start_dt_rus);
    tr.find('button[name=restart]').prop('disabled', task.in_progress);
    if (task.result_attachment) {
      tr.find('.result-attachment-container').show();
      return tr.find('.result-attachment').prop('href', task.result_attachment);
    } else {
      return tr.find('.result-attachment-container').hide();
    }
  };

  this.loadTasks = function() {
    var ids, url;
    ids = $('tr').map(function() {
      return $(this).data('task-id');
    }).toArray();
    url = '/background_tasks/rest/task/';
    return $.ajax({
      method: 'get',
      url: url,
      data: {
        id: ids
      },
      traditional: true,
      success: function(response) {
        var i, len, task;
        for (i = 0, len = response.length; i < len; i++) {
          task = response[i];
          renderTask(task);
        }
        return setTimeout(loadTasks, 2000);
      }
    });
  };

  $(function() {
    prepareCancel();
    prepareRestart();
    return loadTasks();
  });

}).call(this);
