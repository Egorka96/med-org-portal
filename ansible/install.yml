# ansible-playbook -i ansible/inventory -u ansible -v ansible/install.yml

- name: Install MED ORG PORTAL
  hosts: "{{ host }}"
  become: yes
  become_method: sudo

  tasks:
    - name: install packages
      apt:
        name: "{{ item }}"
        update_cache: yes
        cache_valid_time: 3600
      with_items:
        - docker.io
        - python-pip
        - nginx

    - name: install docker-py
      pip:
        name: docker-py
        version: 1.10.6

    - name: remove old med-org-portal instance
      docker_container:
        name: "{{ image_name }}"
        image: "{{ image }}"
        state: absent

    - name: create web directories
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        group: www-data
        recurse: yes
      with_items:
        - "/var/www/{{ web_server_name }}/static"
        - "/var/www/{{ web_server_name }}/media"
        - "/var/log/www/{{ web_server_name }}"

    - name: create conf directory
      file:
        path: "/var/docker/conf/{{ web_server_name }}"
        state: directory
        owner: www-data
        group: www-data
        recurse: yes

    - name: create settings
      template:
        src: local_settings.py.jinja2
        dest: "/var/docker/conf/{{ web_server_name }}/local_settings.py"
        mode: 0600

    - name: Start container db
      docker_container:
        image: postgres:11
        name: "{{ web_server_name }}-db"
        volumes:
          - "/var/docker/{{ web_server_name }}/db:/var/lib/postgresql/data/"
        restart_policy: always
        state: started
        env:
          POSTGRES_PASSWORD: "{{ PASSWORD }}"
          POSTGRES_USER: "{{ service_name }}"
          POSTGRES_NAME: "{{ service_name }}"

    - name: Start container portal
      docker_container:
        image: "{{ image }}"
        name: "{{ image_name }}"
        volumes:
          - "/data/{{ web_server_name }}:/data"
          - "/conf/{{ web_server_name }}:/conf"
          - "/var/www/{{ web_server_name }}/static:/static"
        restart_policy: always
        state: started
        etc_hosts: {"db": "{{ db_host }}"}
        ports:
          - 127.0.0.1:{{ service_port }}:80
        links:
          - "{{ web_server_name }}-db:db"
        env:
          SERVICE_NAME: "{{ service_name }}"

    - name: remove nginx default
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: create nginx config
      template:
        src: nginx.jinja2
        dest: "/etc/nginx/sites-enabled/{{ web_server_name }}"

    - name: reload nginx
      service:
        name: nginx
        state: reloaded